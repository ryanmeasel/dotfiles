## Export variables
# Text attributes
export RED='\033[1;31m'
export GREEN='\033[1;32m'
export YELLOW='\033[1;33m'
export BLUE='\033[1;34m'
export PURPLE='\033[1;35m'
export NOCOLOR='\033[0m'
export BOLD='\033[1m'
export UNDERLINE='\033[4m'

# ZSH automatically launches into a tmux session on launch
export ZSH_TMUX_AUTOSTART=false

# Options for pyenv installs.
# "--enable-framework" installs python as framework which allows it to display
# gui elements such as those created by matplotlib.
export PYTHON_CONFIGURE_OPTS="--enable-framework"


## Path
# Golang environment
export GOPATH=$HOME/sandbox/go
export GOROOT=/usr/local/opt/go/libexec/
export PATH=$PATH:$GOROOT/bin:$GOPATH


## ZSH Packages
source $HOME/.antigen.zsh

# Load the oh-my-zsh's library.
antigen use oh-my-zsh

# Bundles from the default repo (robbyrussell's oh-my-zsh).
antigen bundle git
antigen bundle git-extras
antigen bundle git-flow
antigen bundle pip
antigen bundle jsontools
antigen bundle command-not-found
antigen bundle fasd
antigen bundle tmux
antigen bundle common-aliases
antigen bundle aws
antigen bundle docker
antigen bundle node
antigen bundle npm
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle zsh-users/zsh-history-substring-search ./zsh-history-substring-search.zsh

# OS X  packages
if [[ $(uname) == 'Darwin' ]]; then
    antigen bundle brew
    antigen bundle osx
fi

# Install the Pure theme
antigen bundle mafredri/zsh-async
antigen bundle sindresorhus/pure

# Apply the packages and theme
antigen apply


## Docker

# Remove all exited docker containers
dcclean()
{
    printf "${GREEN}++ Removing exited containers...${NOCOLOR}\n"
    exitedContainers=$(docker ps -a -q -f status=exited)
    if [[ -z $danglingImages ]]; then
        printf "No exited containers to remove.\n"
    else
        docker rm -v $exitedContainers
    fi
    printf "${GREEN}++ Done. ✔${NOCOLOR}\n"
}

# Cleanup docker volumes
dvclean()
{
    printf "${GREEN}++ Cleanup docker volumes...${NOCOLOR}\n"
    docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --rm martin/docker-cleanup-volumes
    printf "${GREEN}++ Done. ✔${NOCOLOR}\n"
}

# Print Dockerfile commands used to create an image 
dc_trace_cmd() {
  local parent=`docker inspect -f '{{ .Parent }}' $1` 2>/dev/null
  declare -i level=$2
  echo ${level}: `docker inspect -f '{{ .ContainerConfig.Cmd }}' $1 2>/dev/null`
  level=level+1
  if [ "${parent}" != "" ]; then
    echo ${level}: $parent 
    dc_trace_cmd $parent $level
  fi
}

# Remove all dangling docker images
diclean()
{
    printf "${GREEN}++ Removing dangling docker images...${NOCOLOR}\n"
    danglingImages=$(docker images -f "dangling=true" -q)
    if [[ -z $danglingImages ]]; then
        printf "No dangling images to remove.\n"
    else
        docker rmi $danglingImages
    fi
    printf "${GREEN}++ Done. ✔${NOCOLOR}\n"
}

# Clean all volumes, containers, and images
alias dcleanall='dcclean && dvclean && diclean'
# Start the LaTeX container
alias dlatex='docker run -it -v $(pwd):/latex/src/ ryanmeasel/latex bash'
# Git history ascending file sort, list all files in the git history in ascending size order
#alias ghafs='git rev-list --objects --all| git cat-file --batch-check=\'%(objecttype) %(objectname) %(objectsize) %(rest)\'| sed -n 's/^blob //p' \
#    | sort --numeric-sort --key=2 \
#    | cut -c 1-12,41-'


## Python environment
# Enable shims and autocomplete for pyenv
if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
# Auto-activate pyenv-virtualenv
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi
# Default directory for virtual environments
mkdir -p ~/.virtualenvs


## FASD
# Initialize fasd
eval "$(fasd --init auto)"


## Misc
# Aliases
alias pclv='pcl_viewer -use_point_picking'

# Make a directory and jump to it
mkcd()
{
    mkdir -p $1
    cd $1
}


# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/ryan/sandbox/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/ryan/sandbox/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/ryan/sandbox/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/ryan/sandbox/google-cloud-sdk/completion.zsh.inc'; fi
